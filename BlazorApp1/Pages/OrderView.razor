@page "/orderView"
@using BlazorApp1.Data
@using BlazorApp1.Data.Order
@using BlazorApp1.Data.CreditCard
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager nav
@inject IJSRuntime js
@inject IOrderService orderService

<h3>Orders</h3>
@if (orders == null)
{
    <text>Loading...</text>
}
else if (orders.Count == 0)
{
    <text>No Orders Made...</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Product</th>
                <th>Card Used</th>
                <th>Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(dynamic o in orders)
            {
                <tr>
                    <td>@o.orderID</td>
                    <td>@o.productName</td>
                    <td>@o.cardNumber</td>
                    <td>@o.orderDate</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => deleteOrder(o.orderID)">delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<dynamic> orders = new List<dynamic>();
    int id;

    //protected override async Task OnInitializedAsync()
    //{
    //    id = await sessionStorage.GetItemAsync<int>("user");
    //    orders = await orderService.GetOrdersByUser(id);

    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        id = await sessionStorage.GetItemAsync<int>("user");
        orders = await orderService.GetOrdersByUser(id);

        StateHasChanged();
    }

    //Method for user to delete orders made
    protected async Task deleteOrder(int id)
    {
        js.InvokeVoidAsync("alert", $"Are you sure?");
        await orderService.DeleteOrder(id);
        nav.NavigateTo(nav.Uri, forceLoad: true);
    }
}
